{"version":3,"sources":["ButtonComponent.js","App.js","serviceWorker.js","index.js"],"names":["ButtonComponent","props","api_url","axios","require","params","state","value","buttonClicked","bind","event","this","setState","getIpAddress","getDateTime","getUserAgent","postToDb","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","console","log","fetch","then","res","json","data","ipAddress","query","browserAgent","navigator","userAgent","post","type","className","onClick","Component","ReactDOM","render","document","getElementById","App","src","alt","Boolean","window","location","hostname","match","StrictMode","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAMqBA,E,kDAUjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAVVC,QAAU,0BASS,EARnBC,MAAQC,EAAQ,GAQG,EAJnBC,OAAS,GAML,EAAKC,MAAQ,CAAEC,MAAO,GACtB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAHN,E,0DAKLC,GACVC,KAAKC,SAAS,CAAEL,MAAOI,KAAKL,MAAMC,MAAQ,IAC1CI,KAAKE,eACLF,KAAKG,cACLH,KAAKI,eACLJ,KAAKK,a,oCAQL,IAAIC,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,cAAgB,KAAOH,EAAMI,WAAa,GAAK,IAAMJ,EAAMK,UACxEC,EAAON,EAAMO,WAAa,IAAMP,EAAMQ,aAAe,IAAMR,EAAMS,aACrEf,KAAKgB,SAAWR,EAAO,IAAMI,EAC7BK,QAAQC,IAAIlB,KAAKgB,Y,0JAIjBG,MAAMnB,KAAKT,SACN6B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,UAAYD,EAAKE,SACnCL,MAAK,kBAAMH,QAAQC,IAAI,EAAKM,c,2IAKjCxB,KAAK0B,aAAe,2BAA6BC,UAAUC,UAC3DX,QAAQC,IAAIlB,KAAK0B,gB,wJAKjB1B,KAAKN,OAAS,CACVsB,SAAUhB,KAAKgB,SACfU,aAAc1B,KAAK0B,aACnBF,UAAWxB,KAAKwB,W,SAEJhC,IAAMqC,KAAK,6BAA8B7B,KAAKN,Q,OAA1D2B,E,OACJJ,QAAQC,IAAIG,EAAIE,M,qIAKhB,OACI,6BACI,6BAAMvB,KAAKL,MAAMC,OACjB,4BAAQkC,KAAK,SAASC,UAAU,6BAA6BC,QAAShC,KAAKH,eAA3E,c,GAhE6BoC,aAsE7CC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SC5DbC,MAbf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKQ,IAAI,YAAYR,UAAU,WAAWS,IAAI,SAC9C,6BACA,kBAAC,EAAD,UCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNX,IAASC,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASC,eAAe,SDwHpB,kBAAmBV,WACrBA,UAAUoB,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.f58e4976.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\n\n\nexport default class ButtonComponent extends Component {\n    api_url = 'http://ip-api.com/json/';\n    axios = require('axios');\n    dateTime;\n    browserAgent;\n    ipAddress;\n    params = [];\n\n\n\n    constructor(props) {\n        super(props)\n        this.state = { value: 0 };\n        this.buttonClicked = this.buttonClicked.bind(this);\n    }\n    buttonClicked(event) {\n        this.setState({ value: this.state.value + 1 });\n        this.getIpAddress();\n        this.getDateTime();\n        this.getUserAgent();\n        this.postToDb();\n\n\n    }\n\n\n\n    getDateTime() {\n        var today = new Date();\n        var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        this.dateTime = date + ' ' + time;\n        console.log(this.dateTime);\n    }\n\n    async getIpAddress() {\n        fetch(this.api_url)\n            .then(res => res.json())\n            .then(data => this.ipAddress = data.query)\n            .then(() => console.log(this.ipAddress));\n    }\n\n\n    getUserAgent() {\n        this.browserAgent = \"User-agent header sent: \" + navigator.userAgent;\n        console.log(this.browserAgent);\n    }\n\n\n    async postToDb() {\n        this.params = {\n            dateTime: this.dateTime,\n            browserAgent: this.browserAgent,\n            ipAddress: this.ipAddress\n        }\n        let res = await axios.post('http://localhost:9000/info', this.params);\n        console.log(res.data);\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div>{this.state.value}</div>\n                <button type=\"button\" className=\"btn btn-primary btn-sm bcl\" onClick={this.buttonClicked}>Click</button>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <ButtonComponent />,\n    document.getElementById('root')\n);","import React  from 'react';\nimport './App.css';\nimport ButtonComponent from './ButtonComponent'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"globe.png\" className=\"App-logo\" alt=\"logo\" />\n        <div>\n        <ButtonComponent/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}